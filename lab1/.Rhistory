xGrid <- seq(0.001, 0.999, by=0.001)
tau2 = (sum(logy - mean)^2)/n
posterior = dinvchisq(xGrid, n, tau2, log=FALSE)
maxDensity <- max(posterior)
posteriorRandomDraw <- rinvchisq(10000,  n, tau2)
#plotting
attach(mtcars)
par(mfrow=c(2,2))
plot(xGrid, posterior, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
ylab = 'Density', main = 'Chi Posterior of Variance')
plot(sort(posteriorRandomDraw))
#part b)
giniTheory = 2*pnorm(posteriorRandomDraw/sqrt(2), mean = 0, sd = 1) - 1
logGini = log(giniTheory)
distrubtionGiniLog = getDistrubutionFromPoints(logGini)
distrubtionGini = getDistrubutionFromPoints(giniTheory)
plot(distrubtionGiniLog)
plot(distrubtionGini)
#part c)
lowerData = getIntervalData(giniTheory, 0, 0.025)
middleData = getIntervalData(giniTheory, 0.025, 0.975)
upperData = getIntervalData(giniTheory, 0.975, 1)
print(density(middleData))
print(min(middleData))
print(max(middleData))
#posteriorRandomOverCondition = which(posteriorRandomDraw < 0.4)
#probabilityCondition = length(posteriorRandomOverCondition)/length(posteriorRandomDraw)
#trueProbability = pbeta(0.4, posteriorAlpha, posteriorBeta)
#print(paste0("propability condition with random: ", probabilityCondition))
#(paste0("ground truth probability: ", trueProbability))
#logOdds = log(posteriorRandomDraw/(1 - posteriorRandomDraw))
#density(logOdds)
# Kommentera bort hist om du vill köra det bort kommenterade ovan, om båda delarna plottas så kommer manipulate-panelen inte upp.
#hist(logOdds)
}
num = length(logY)
draws = drawFromPosterior(u, num, logY)
#manipulate(
#  num = length(logY)
#  drawFromPosterior(u, num, logY)
#  num = slider(1, 1000, step=1, initial = 2, label = "Number of trials")
library(manipulate)
alpha = 2
beta = 2
s = 14
num = 20
f = num - s
p = s/num
prior = dbeta(alpha, beta, )
posterior = rbeta(alpha + s, beta + f, n = num)
print(paste0("ground truth std: ", sqrt(p*(1-p))))
print(paste0("ground truth Mean: ", p))
BetaRandomPosteriorPriorPlotandMeanStdComparison <- function(a,b,n,p){
xGrid <- seq(0.001, 0.999, by=0.001)
normalizedLikelihood = dbeta(xGrid, n*p+1, n*(1-p)+1)
prior = dbeta(xGrid, a, b)
posterior = dbeta(xGrid, a+n*p, b+n*(1-p))
posteriorAlpha = a+n*p
posteriorBeta = b+n*(1-p)
posteriorRandom <- rbeta(n, posteriorAlpha, posteriorBeta)
maxDensity <- max(normalizedLikelihood, prior, posterior) # Use to make the y-axis high enough
plot(xGrid, normalizedLikelihood, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
ylab = 'Density', main = 'Bernoulli model - Beta(a,b) prior')
lines(xGrid, posterior, lwd = 3, col = "red")
lines(xGrid, prior, lwd = 3, col = "green")
legend(x = 0.01, y = maxDensity*0.95, legend = c("Likelihood (normalized)", "Prior", "Posterior"), col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
print(paste0("ground truth std: ", sqrt(posteriorAlpha*posteriorBeta/(((posteriorAlpha+posteriorBeta)^2)*(posteriorAlpha+posteriorBeta+1)))))
print(paste0("std: ", sd(posteriorRandom)))
print(paste0("Mean: ", mean(posteriorRandom)))
posteriorRandomDraw <- rbeta(10000, posteriorAlpha, posteriorBeta)
posteriorRandomOverCondition = which(posteriorRandomDraw < 0.4)
probabilityCondition = length(posteriorRandomOverCondition)/length(posteriorRandomDraw)
trueProbability = pbeta(0.4, posteriorAlpha, posteriorBeta)
print(paste0("propability condition with random: ", probabilityCondition))
print(paste0("ground truth probability: ", trueProbability))
logOdds = log(posteriorRandomDraw/(1 - posteriorRandomDraw))
density(logOdds)
# Kommentera bort hist om du vill köra det bort kommenterade ovan, om båda delarna plottas så kommer manipulate-panelen inte upp.
#hist(logOdds)
}
manipulate(
BetaRandomPosteriorPriorPlotandMeanStdComparison(alpha,beta,num,p),
num = slider(1, 1000, step=1, initial = 2, label = "Number of trials")
)
library(manipulate)
alpha = 2
beta = 2
s = 14
num = 20
f = num - s
p = s/num
prior = dbeta(alpha, beta, )
posterior = rbeta(alpha + s, beta + f, n = num)
print(paste0("ground truth std: ", sqrt(p*(1-p))))
print(paste0("ground truth Mean: ", p))
BetaRandomPosteriorPriorPlotandMeanStdComparison <- function(a,b,n,p){
xGrid <- seq(0.001, 0.999, by=0.001)
normalizedLikelihood = dbeta(xGrid, n*p+1, n*(1-p)+1)
prior = dbeta(xGrid, a, b)
posterior = dbeta(xGrid, a+n*p, b+n*(1-p))
posteriorAlpha = a+n*p
posteriorBeta = b+n*(1-p)
posteriorRandom <- rbeta(n, posteriorAlpha, posteriorBeta)
maxDensity <- max(normalizedLikelihood, prior, posterior) # Use to make the y-axis high enough
plot(xGrid, normalizedLikelihood, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
ylab = 'Density', main = 'Bernoulli model - Beta(a,b) prior')
lines(xGrid, posterior, lwd = 3, col = "red")
lines(xGrid, prior, lwd = 3, col = "green")
legend(x = 0.01, y = maxDensity*0.95, legend = c("Likelihood (normalized)", "Prior", "Posterior"), col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
print(paste0("ground truth std: ", sqrt(posteriorAlpha*posteriorBeta/(((posteriorAlpha+posteriorBeta)^2)*(posteriorAlpha+posteriorBeta+1)))))
print(paste0("std: ", sd(posteriorRandom)))
print(paste0("Mean: ", mean(posteriorRandom)))
posteriorRandomDraw <- rbeta(10000, posteriorAlpha, posteriorBeta)
posteriorRandomOverCondition = which(posteriorRandomDraw < 0.4)
probabilityCondition = length(posteriorRandomOverCondition)/length(posteriorRandomDraw)
trueProbability = pbeta(0.4, posteriorAlpha, posteriorBeta)
print(paste0("propability condition with random: ", probabilityCondition))
print(paste0("ground truth probability: ", trueProbability))
logOdds = log(posteriorRandomDraw/(1 - posteriorRandomDraw))
density(logOdds)
# Kommentera bort hist om du vill köra det bort kommenterade ovan, om båda delarna plottas så kommer manipulate-panelen inte upp.
#hist(logOdds)
}
manipulate(
BetaRandomPosteriorPriorPlotandMeanStdComparison(alpha,beta,num,p),
num = slider(1, 1000, step=1, initial = 2, label = "Number of trials")
)
knitr::opts_chunk$set(echo = TRUE)
install.package('knitr')
install.packages('knitr')
lines(kGrid, posterior, lwd = 3, col = "green")
knitr::opts_chunk$set(echo = TRUE)
f = num - s
install.packages('markdown')
beta = 2
install.packages('knitr)')
install.packages('knitr')
install.packages("knitr")
mu = 2.39
obsRad = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kGrid <- seq(0.001, 10, by=0.001)
priorDist <- dexp(kGrid)
#plot(kGrid, priorDist)
kappa = kGrid
dvonmises <- function(y, mu, kappa){
res = 1
for (i in y){
res = res*(exp(kappa*cos(i-mu))/(2*pi*besselI(kappa,0)))
}
return(res)
}
likeliHood <- dvonmises(obsRad, mu, kappa)
#plot(kGrid, likeliHood/(sum(likeliHood)*0.001))
posterior = likeliHood*priorDist
posterior = (posterior/sum(posterior))/0.001
likeliHood = (likeliHood/sum(likeliHood))/0.001
#Plots
#attach(mtcars)
#par(mfrow=c(2,2))
#Prior
#plot(kGrid, priorDist, main = "Prior distribution")
#Likelihood
#plot(kGrid, likeliHood/(sum(likeliHood))*0.001, main = "Likelihood distribution")
#Posterior
#plot(kGrid, posterior, main = "Posterior distribution")
plot(kGrid, priorDist, type = 'l', lwd = 3, col = "blue", xlab = "k",
ylab = 'Density', main = 'von Mises - Wind direction')
lines(kGrid, likeliHood, lwd = 3, col = "red")
lines(kGrid, posterior, lwd = 3, col = "green")
legend(10, legend = c("Likelihood (normalized)", "Prior", "Posterior"),
col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
#md = Mode(posterior)
#index = which(posterior == max(posterior))
#k = kGrid[index]
#print(k)
library(manipulate)
alpha = 2
beta = 2
s = 14
num = 20
f = num - s
p = s/num
prior = dbeta(alpha, beta, )
posterior = rbeta(alpha + s, beta + f, n = num)
print(paste0("ground truth std: ", sqrt(p*(1-p))))
print(paste0("ground truth Mean: ", p))
BetaRandomPosteriorPriorPlotandMeanStdComparison <- function(a,b,n,p){
xGrid <- seq(0.001, 0.999, by=0.001)
normalizedLikelihood = dbeta(xGrid, 20*p+1, 20*(1-p)+1)
prior = dbeta(xGrid, a, b)
posterior = dbeta(xGrid, a+20*p, b+20*(1-p))
posteriorAlpha = a+20*p
posteriorBeta = b+20*(1-p)
posteriorRandom <- rbeta(n, posteriorAlpha, posteriorBeta)
maxDensity <- max(normalizedLikelihood, prior, posterior) # Use to make the y-axis high enough
#plot(xGrid, normalizedLikelihood, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
#     ylab = 'Density', main = 'Bernoulli model - Beta(a,b) prior')
#lines(xGrid, posterior, lwd = 3, col = "red")
#lines(xGrid, prior, lwd = 3, col = "green")
#legend(x = 0.01, y = maxDensity*0.95, legend = c("Likelihood (normalized)", "Prior", "Posterior"), col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
posteriorMean = posteriorAlpha/(posteriorAlpha + posteriorBeta)
print(paste0('Posterior mean GT: ', posteriorMean))
print(paste0("ground truth std: ", sqrt(posteriorAlpha*posteriorBeta/(((posteriorAlpha+posteriorBeta)^2)*(posteriorAlpha+posteriorBeta+1)))))
print(paste0("std: ", sd(posteriorRandom)))
print(paste0("Mean: ", mean(posteriorRandom)))
#b part
posteriorAlpha = a+20*p
posteriorBeta = b+20*(1-p)
posteriorRandomDraw <- rbeta(10000, posteriorAlpha, posteriorBeta)
posteriorRandomOverCondition = which(posteriorRandomDraw < 0.4)
probabilityCondition = length(posteriorRandomOverCondition)/length(posteriorRandomDraw)
trueProbability = pbeta(0.4, posteriorAlpha, posteriorBeta)
print(paste0("propability condition with random: ", probabilityCondition))
print(paste0("ground truth probability: ", trueProbability))
#c part
logOdds = log(posteriorRandomDraw/(1 - posteriorRandomDraw))
density(logOdds)
# Kommentera bort hist om du vill köra det bort kommenterade ovan, om båda delarna plottas så kommer manipulate-panelen inte upp.
hist(logOdds)
#hist(posteriorRandomDraw)
#hist(posteriorRandomDraw/(1 - posteriorRandomDraw))
}
manipulate(
BetaRandomPosteriorPriorPlotandMeanStdComparison(alpha,beta,num,p),
num = slider(1, 10000, step=1, initial = 2, label = "Number of trials")
library(manipulate)
alpha = 2
beta = 2
s = 14
num = 20
f = num - s
p = s/num
prior = dbeta(alpha, beta, )
posterior = rbeta(alpha + s, beta + f, n = num)
print(paste0("ground truth std: ", sqrt(p*(1-p))))
print(paste0("ground truth Mean: ", p))
BetaRandomPosteriorPriorPlotandMeanStdComparison <- function(a,b,n,p){
xGrid <- seq(0.001, 0.999, by=0.001)
normalizedLikelihood = dbeta(xGrid, 20*p+1, 20*(1-p)+1)
prior = dbeta(xGrid, a, b)
posterior = dbeta(xGrid, a+20*p, b+20*(1-p))
posteriorAlpha = a+20*p
posteriorBeta = b+20*(1-p)
posteriorRandom <- rbeta(n, posteriorAlpha, posteriorBeta)
maxDensity <- max(normalizedLikelihood, prior, posterior) # Use to make the y-axis high enough
#plot(xGrid, normalizedLikelihood, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
#     ylab = 'Density', main = 'Bernoulli model - Beta(a,b) prior')
#lines(xGrid, posterior, lwd = 3, col = "red")
#lines(xGrid, prior, lwd = 3, col = "green")
#legend(x = 0.01, y = maxDensity*0.95, legend = c("Likelihood (normalized)", "Prior", "Posterior"), col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
posteriorMean = posteriorAlpha/(posteriorAlpha + posteriorBeta)
print(paste0('Posterior mean GT: ', posteriorMean))
print(paste0("ground truth std: ", sqrt(posteriorAlpha*posteriorBeta/(((posteriorAlpha+posteriorBeta)^2)*(posteriorAlpha+posteriorBeta+1)))))
print(paste0("std: ", sd(posteriorRandom)))
print(paste0("Mean: ", mean(posteriorRandom)))
#b part
posteriorAlpha = a+20*p
posteriorBeta = b+20*(1-p)
posteriorRandomDraw <- rbeta(10000, posteriorAlpha, posteriorBeta)
posteriorRandomOverCondition = which(posteriorRandomDraw < 0.4)
probabilityCondition = length(posteriorRandomOverCondition)/length(posteriorRandomDraw)
trueProbability = pbeta(0.4, posteriorAlpha, posteriorBeta)
print(paste0("propability condition with random: ", probabilityCondition))
print(paste0("ground truth probability: ", trueProbability))
#c part
logOdds = log(posteriorRandomDraw/(1 - posteriorRandomDraw))
density(logOdds)
# Kommentera bort hist om du vill köra det bort kommenterade ovan, om båda delarna plottas så kommer manipulate-panelen inte upp.
hist(logOdds)
#hist(posteriorRandomDraw)
#hist(posteriorRandomDraw/(1 - posteriorRandomDraw))
}
manipulate(
BetaRandomPosteriorPriorPlotandMeanStdComparison(alpha,beta,num,p),
num = slider(1, 10000, step=1, initial = 2, label = "Number of trials")
)
library(manipulate)
alpha = 2
beta = 2
s = 14
num = 20
f = num - s
p = s/num
prior = dbeta(alpha, beta, )
posterior = rbeta(alpha + s, beta + f, n = num)
print(paste0("ground truth std: ", sqrt(p*(1-p))))
print(paste0("ground truth Mean: ", p))
BetaRandomPosteriorPriorPlotandMeanStdComparison <- function(a,b,n,p){
xGrid <- seq(0.001, 0.999, by=0.001)
normalizedLikelihood = dbeta(xGrid, 20*p+1, 20*(1-p)+1)
prior = dbeta(xGrid, a, b)
posterior = dbeta(xGrid, a+20*p, b+20*(1-p))
posteriorAlpha = a+20*p
posteriorBeta = b+20*(1-p)
posteriorRandom <- rbeta(n, posteriorAlpha, posteriorBeta)
maxDensity <- max(normalizedLikelihood, prior, posterior) # Use to make the y-axis high enough
plot(xGrid, normalizedLikelihood, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
ylab = 'Density', main = 'Bernoulli model - Beta(a,b) prior')
lines(xGrid, posterior, lwd = 3, col = "red")
lines(xGrid, prior, lwd = 3, col = "green")
legend(x = 0.01, y = maxDensity*0.95, legend = c("Likelihood (normalized)", "Prior", "Posterior"), col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
posteriorMean = posteriorAlpha/(posteriorAlpha + posteriorBeta)
print(paste0('Posterior mean GT: ', posteriorMean))
print(paste0("ground truth std: ", sqrt(posteriorAlpha*posteriorBeta/(((posteriorAlpha+posteriorBeta)^2)*(posteriorAlpha+posteriorBeta+1)))))
print(paste0("std: ", sd(posteriorRandom)))
print(paste0("Mean: ", mean(posteriorRandom)))
#b part
posteriorAlpha = a+20*p
posteriorBeta = b+20*(1-p)
posteriorRandomDraw <- rbeta(10000, posteriorAlpha, posteriorBeta)
posteriorRandomOverCondition = which(posteriorRandomDraw < 0.4)
probabilityCondition = length(posteriorRandomOverCondition)/length(posteriorRandomDraw)
trueProbability = pbeta(0.4, posteriorAlpha, posteriorBeta)
print(paste0("propability condition with random: ", probabilityCondition))
print(paste0("ground truth probability: ", trueProbability))
#c part
logOdds = log(posteriorRandomDraw/(1 - posteriorRandomDraw))
density(logOdds)
# Kommentera bort hist om du vill köra det bort kommenterade ovan, om båda delarna plottas så kommer manipulate-panelen inte upp.
#hist(logOdds)
#hist(posteriorRandomDraw)
#hist(posteriorRandomDraw/(1 - posteriorRandomDraw))
}
manipulate(
BetaRandomPosteriorPriorPlotandMeanStdComparison(alpha,beta,num,p),
num = slider(1, 10000, step=1, initial = 2, label = "Number of trials")
)
mu = 2.39
obsRad = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kGrid <- seq(0.001, 10, by=0.001)
priorDist <- dexp(kGrid)
#plot(kGrid, priorDist)
kappa = kGrid
dvonmises <- function(y, mu, kappa){
res = 1
for (i in y){
res = res*(exp(kappa*cos(i-mu))/(2*pi*besselI(kappa,0)))
}
return(res)
}
likeliHood <- dvonmises(obsRad, mu, kappa)
#plot(kGrid, likeliHood/(sum(likeliHood)*0.001))
posterior = likeliHood*priorDist
posterior = (posterior/sum(posterior))/0.001
likeliHood = (likeliHood/sum(likeliHood))/0.001
#Plots
#attach(mtcars)
#par(mfrow=c(2,2))
#Prior
#plot(kGrid, priorDist, main = "Prior distribution")
#Likelihood
#plot(kGrid, likeliHood/(sum(likeliHood))*0.001, main = "Likelihood distribution")
#Posterior
#plot(kGrid, posterior, main = "Posterior distribution")
plot(kGrid, priorDist, type = 'l', lwd = 3, col = "blue", xlab = "k",
ylab = 'Density', main = 'von Mises - Wind direction')
lines(kGrid, likeliHood, lwd = 3, col = "red")
lines(kGrid, posterior, lwd = 3, col = "green")
legend(x = 8, y = 0.8, legend = c("Likelihood (normalized)", "Prior", "Posterior"),
col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
#md = Mode(posterior)
#index = which(posterior == max(posterior))
#k = kGrid[index]
#print(k)
mu = 2.39
obsRad = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kGrid <- seq(0.001, 10, by=0.001)
priorDist <- dexp(kGrid)
#plot(kGrid, priorDist)
kappa = kGrid
dvonmises <- function(y, mu, kappa){
res = 1
for (i in y){
res = res*(exp(kappa*cos(i-mu))/(2*pi*besselI(kappa,0)))
}
return(res)
}
likeliHood <- dvonmises(obsRad, mu, kappa)
#plot(kGrid, likeliHood/(sum(likeliHood)*0.001))
posterior = likeliHood*priorDist
posterior = (posterior/sum(posterior))/0.001
likeliHood = (likeliHood/sum(likeliHood))/0.001
#Plots
#attach(mtcars)
#par(mfrow=c(2,2))
#Prior
#plot(kGrid, priorDist, main = "Prior distribution")
#Likelihood
#plot(kGrid, likeliHood/(sum(likeliHood))*0.001, main = "Likelihood distribution")
#Posterior
#plot(kGrid, posterior, main = "Posterior distribution")
plot(kGrid, priorDist, type = 'l', lwd = 3, col = "blue", xlab = "k",
ylab = 'Density', main = 'von Mises - Wind direction')
lines(kGrid, likeliHood, lwd = 3, col = "red")
lines(kGrid, posterior, lwd = 3, col = "green")
legend(x = 5, y = 0.8, legend = c("Likelihood (normalized)", "Prior", "Posterior"),
col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
#md = Mode(posterior)
#index = which(posterior == max(posterior))
#k = kGrid[index]
#print(k)
```
mu = 2.39
obsRad = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kGrid <- seq(0.001, 10, by=0.001)
priorDist <- dexp(kGrid)
#plot(kGrid, priorDist)
kappa = kGrid
dvonmises <- function(y, mu, kappa){
res = 1
for (i in y){
res = res*(exp(kappa*cos(i-mu))/(2*pi*besselI(kappa,0)))
}
return(res)
}
likeliHood <- dvonmises(obsRad, mu, kappa)
#plot(kGrid, likeliHood/(sum(likeliHood)*0.001))
posterior = likeliHood*priorDist
posterior = (posterior/sum(posterior))/0.001
likeliHood = (likeliHood/sum(likeliHood))/0.001
#Plots
#attach(mtcars)
#par(mfrow=c(2,2))
#Prior
#plot(kGrid, priorDist, main = "Prior distribution")
#Likelihood
#plot(kGrid, likeliHood/(sum(likeliHood))*0.001, main = "Likelihood distribution")
#Posterior
#plot(kGrid, posterior, main = "Posterior distribution")
plot(kGrid, priorDist, type = 'l', lwd = 3, col = "blue", xlab = "k",
ylab = 'Density', main = 'von Mises - Wind direction')
lines(kGrid, likeliHood, lwd = 3, col = "red")
lines(kGrid, posterior, lwd = 3, col = "green")
legend(x = 5, y = 0.8, legend = c("Likelihood (normalized)", "Prior", "Posterior"),
col = c("red","blue","green"), lwd = c(3,3,3), cex = 0.7)
#md = Mode(posterior)
#index = which(posterior == max(posterior))
#k = kGrid[index]
#print(k)
```
library(manipulate)
library(LaplacesDemon)
u = 3.5
y = c(14, 25, 45, 25, 30, 33, 19, 50, 34, 67)
logY = log(y)
meanY = sum(y)/length(y)
meanLogY = sum(logY)/length(logY)
getDistrubutionFromPoints <- function(x){
n = length(x)
sortedX = sort(x)
cumPercent = (1:n)/n
densityPercent = (cumPercent[2:n] - cumPercent[1:n-1])/(sortedX[2:n] - sortedX[1:(n-1)])
dataMatrix = matrix(1:(2*n), nrow=n, ncol=2, byrow=TRUE)
dataMatrix[ ,1] = sortedX
dataMatrix[ ,2] = cumPercent
return(dataMatrix)
}
getIntervalData <- function(x, lowerPercent, upperPercent){
lowerFlag = FALSE
upperFlag = FALSE
n = length(x)
sortedX = sort(x)
i = 0
for(data in x) {
i = i + 1
if(i/n >= lowerPercent && !lowerFlag) {
lowerFlag = TRUE
lowerIndex = i
}
else if(i/n > upperPercent){
upperIndex = i - 1
upperFlag = TRUE
break;
}
}
if(!upperFlag){
upperIndex = n
}
return(sortedX[lowerIndex:upperIndex])
}
drawFromPosterior <- function(mean, n, logy){
xGrid <- seq(0.001, 0.999, by=0.001)
tau2 = (sum(logy - mean)^2)/n
posterior = dinvchisq(xGrid, n, tau2, log=FALSE)
maxDensity <- max(posterior)
posteriorRandomDraw <- rinvchisq(10000,  n, tau2)
#plotting
attach(mtcars)
par(mfrow=c(4,2))
plot(xGrid, posterior, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
ylab = 'Density', main = 'Chi Posterior of Variance')
plot(sort(posteriorRandomDraw))
hist(posteriorRandomDraw)
#part b)
giniTheory = 2*pnorm(posteriorRandomDraw/sqrt(2), mean = 0, sd = 1) - 1
logGini = log(giniTheory)
distrubtionGiniLog = getDistrubutionFromPoints(logGini)
distrubtionGini = getDistrubutionFromPoints(giniTheory)
plot(distrubtionGiniLog)
hist(logGini)
plot(distrubtionGini)
hist(giniTheory)
#part c)
lowerData = getIntervalData(giniTheory, 0, 0.025)
middleData = getIntervalData(giniTheory, 0.025, 0.975)
upperData = getIntervalData(giniTheory, 0.975, 1)
print(density(middleData))
print(paste0("Lower end of interval: ", min(middleData)))
print(paste0("Upper end of interval: ", max(middleData)))
}
num = length(logY)
draws = drawFromPosterior(u, num, logY)
