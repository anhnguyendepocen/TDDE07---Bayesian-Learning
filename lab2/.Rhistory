vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = muN, S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
ys = c()
xs = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
xs = c(xs, i/1000)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
y_df = subset(y_df, select = -c(1) )
mediany = matrix(1, 1000, 1)
lowery = matrix(1, 1000, 1)
uppery = matrix(1, 1000, 1)
for (row in 1:nrow(y_df)) {
mediany[row] = median(as.numeric(as.vector(y_df[row, ])))
lowery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.025)
uppery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.975)
}
plot(TempLinkoping, col="black")
lines(xs, mediany, col="blue")
lines(xs, lowery, col="red")
lines(xs, uppery, col="red")
hist(betas0, nclass=30)
hist(betas1, nclass=30)
hist(betas2, nclass=30)
x
y
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = muN, S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
ys = c()
xs = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
xs = c(xs, i/1000)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
y_df = subset(y_df, select = -c(1) )
mediany = matrix(1, 1000, 1)
lowery = matrix(1, 1000, 1)
uppery = matrix(1, 1000, 1)
for (row in 1:nrow(y_df)) {
mediany[row] = median(as.numeric(as.vector(y_df[row, ])))
lowery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.025)
uppery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.975)
}
plot(TempLinkoping, col="black")
lines(xs, mediany, col="blue")
lines(xs, lowery, col="red")
lines(xs, uppery, col="red")
hist(betas0, nclass=30)
hist(betas1, nclass=30)
hist(betas2, nclass=30)
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
ys = c()
xs = c()
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = muN, S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
xs = c(xs, i/1000)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
y_df = subset(y_df, select = -c(1) )
mediany = matrix(1, 1000, 1)
lowery = matrix(1, 1000, 1)
uppery = matrix(1, 1000, 1)
for (row in 1:nrow(y_df)) {
mediany[row] = median(as.numeric(as.vector(y_df[row, ])))
lowery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.025)
uppery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.975)
}
plot(TempLinkoping, col="black")
lines(xs, mediany, col="blue")
lines(xs, lowery, col="red")
lines(xs, uppery, col="red")
hist(betas0, nclass=30)
hist(betas1, nclass=30)
hist(betas2, nclass=30)
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = muN, S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
xs = c()
for(i in 1:1000) {
xs = c(xs, i/1000)
}
y_df = subset(y_df, select = -c(1) )
mediany = matrix(1, 1000, 1)
lowery = matrix(1, 1000, 1)
uppery = matrix(1, 1000, 1)
for (row in 1:nrow(y_df)) {
mediany[row] = median(as.numeric(as.vector(y_df[row, ])))
lowery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.025)
uppery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.975)
}
plot(TempLinkoping, col="black")
lines(xs, mediany, col="blue")
lines(xs, lowery, col="red")
lines(xs, uppery, col="red")
hist(betas0, nclass=30)
hist(betas1, nclass=30)
hist(betas2, nclass=30)
x
betas0
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = muN, S = singleSigma*inv(omegaN))
print(randomBeta)
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
muN
omegaN
Vn
vN
vNsigmaN2
randomSigma2
randomBetas
sigmas
y_df
randomSigma2
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = muN, S = singleSigma*inv(omegaN))
print(randomBeta)
print(singleSigma)
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = t(muN), S = singleSigma*inv(omegaN))
print(randomBeta)
print(singleSigma)
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = t(muN), S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = t(muN), S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
xs = c()
for(i in 1:1000) {
xs = c(xs, i/1000)
}
y_df = subset(y_df, select = -c(1) )
mediany = matrix(1, 1000, 1)
lowery = matrix(1, 1000, 1)
uppery = matrix(1, 1000, 1)
for (row in 1:nrow(y_df)) {
mediany[row] = median(as.numeric(as.vector(y_df[row, ])))
lowery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.025)
uppery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.975)
}
plot(TempLinkoping, col="black")
lines(xs, mediany, col="blue")
lines(xs, lowery, col="red")
lines(xs, uppery, col="red")
hist(betas0, nclass=30)
hist(betas1, nclass=30)
hist(betas2, nclass=30)
timeOptimum = -betas1/(2*betas2)
hist(timeOptimum, nclass=30)
muN = inv(t(matrix_x)%*%matrix_x + omega0)%*%(t(matrix_x)%*%matrix_x%*%betahat + omega0%*%mu0)
omegaN = t(matrix_x)%*%matrix_x + omega0
vN = v0 + 366
vNsigmaN2 = v0*sigmasq0 + (t(matrix_y)%*%matrix_y + t(mu0)%*%omega0%*%mu0 - t(muN)%*%omegaN%*%muN)
randomSigma2 <- rinvchisq(n = 1000, df = vN, scale = (vNsigmaN2/vN))
randomBetas <- c()
plot(TempLinkoping, col="black")
sigmas = data.frame(randomSigma2)
y_df = data.frame(matrix(1, 1000, 1))
betas0 = c()
betas1 = c()
betas2 = c()
sigma2s = c()
ibeta = 0
for(singleSigma in randomSigma2) {
randomBeta <- rmvt(n = 1,mu = t(muN), S = singleSigma*inv(omegaN))
ibeta = ibeta + 1
ys = c()
for (i in 1:1000) {
y = randomBeta[1, 1] + randomBeta[1, 2]*i/1000 + randomBeta[1, 3]*(i/1000)^2
ys = c(ys, y)
}
betas0 = c(betas0, randomBeta[1, 1])
betas1 = c(betas1, randomBeta[1, 2])
betas2 = c(betas2, randomBeta[1, 3])
sigma2s = c(sigma2s, singleSigma)
y_df[paste0("trial", ibeta)] <- data.frame(ys)
}
xs = c()
for(i in 1:1000) {
xs = c(xs, i/1000)
}
y_df = subset(y_df, select = -c(1) )
mediany = matrix(1, 1000, 1)
lowery = matrix(1, 1000, 1)
uppery = matrix(1, 1000, 1)
for (row in 1:nrow(y_df)) {
mediany[row] = median(as.numeric(as.vector(y_df[row, ])))
lowery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.025)
uppery[row] = quantile(x = as.numeric(as.vector(y_df[row, ])), probs = 0.975)
}
plot(TempLinkoping, col="black")
lines(xs, mediany, col="blue")
lines(xs, lowery, col="red")
lines(xs, uppery, col="red")
hist(betas0, nclass=30)
hist(betas1, nclass=30)
hist(betas2, nclass=30)
hist(sigma2s, nclass=30)
womenWork<-read.table("WomenWork.dat",header=TRUE)  # Spam data from Hastie et al.
glmModel <- glm(Work ~ 0 + ., data = womenWork, family = binomial)
### b
chooseCov <- c(1:8) # Here we choose which covariates to include in the model
tau <- 10; # Prior scaling factor such that Prior Covariance = (tau^2)*I
###########     END USER INPUT    ################
# install.packages("mvtnorm") # Loading a package that contains the multivariate normal pdf
library("mvtnorm") # This command reads the mvtnorm package into R's memory. NOW we can use dmvnorm function.
# Loading data from file
Data<-read.table("WomenWork.dat",header=TRUE)  # Spam data from Hastie et al.
y <- as.vector(womenWork[,1]); # Data from the read.table function is a data frame. Let's convert y and X to vector and matrix.
X <- as.matrix(womenWork[,2:9]);
covNames <- names(womenWork)[2:length(names(womenWork))];
X <- X[,chooseCov]; # Here we pick out the chosen covariates.
covNames <- covNames[chooseCov];
nPara <- dim(X)[2];
# Setting up the prior
mu <- as.vector(rep(0,nPara)) # Prior mean vector
Sigma <- tau^2*diag(nPara);
LogPostLogistic <- function(betaVect,y,X,mu,Sigma){
nPara <- length(betaVect);
linPred <- X%*%betaVect;
logLik <- sum( linPred*y -log(1 + exp(linPred)));
if (abs(logLik) == Inf) logLik = -20000; # Likelihood is not finite, stear the optimizer away from here!
logPrior <- dmvnorm(betaVect, matrix(0,nPara,1), Sigma, log=TRUE);
return(logLik + logPrior)
}
initVal <- as.vector(rep(0,dim(X)[2]));
logPost = LogPostLogistic;
OptimResults<-optim(initVal,logPost,gr=NULL,y,X,mu,Sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
# Printing the results to the screen
names(OptimResults$par) <- covNames # Naming the coefficient by covariates
approxPostStd <- sqrt(diag(-solve(OptimResults$hessian))) # Computing approximate standard deviations.
approxPostStd <- sqrt(diag(-solve(OptimResults$hessian)))
names(approxPostStd) <- covNames # Naming the coefficient by covariates
betatilde = OptimResults$par
print("Betatilde: ")
print(betatilde)
print("Jacobiany beta: ")
print(approxPostStd)
print("Intervall NSmallChild: ")
upperb = betatilde["NSmallChild"] + 1.96*approxPostStd["NSmallChild"]
lowerb = betatilde["NSmallChild"] - 1.96*approxPostStd["NSmallChild"]
print(upperb)
print(lowerb)
### part c
covarMatrix = -inv(OptimResults$hessian)
ladyInput = c(1, 10, 8, 10, (10/10)^2, 40, 1, 1)
workOrNots = c()
betas = rmvt(n = 1000,mu = matrix(betatilde), S = covarMatrix)
for(row in 1:nrow(betas)) {
working = exp(ladyInput %*% betas[row, ])/(1 + exp(ladyInput %*% betas[row, ]))
workOrNots = c(workOrNots, working)
}
hist(workOrNots, n=30)
workOrNots
min(workOrNots)
max(workOrNots)
womenWork<-read.table("WomenWork.dat",header=TRUE)  # Spam data from Hastie et al.
glmModel <- glm(Work ~ 0 + ., data = womenWork, family = binomial)
### b
chooseCov <- c(1:8) # Here we choose which covariates to include in the model
tau <- 10; # Prior scaling factor such that Prior Covariance = (tau^2)*I
###########     END USER INPUT    ################
# install.packages("mvtnorm") # Loading a package that contains the multivariate normal pdf
library("mvtnorm") # This command reads the mvtnorm package into R's memory. NOW we can use dmvnorm function.
# Loading data from file
Data<-read.table("WomenWork.dat",header=TRUE)  # Spam data from Hastie et al.
y <- as.vector(womenWork[,1]); # Data from the read.table function is a data frame. Let's convert y and X to vector and matrix.
X <- as.matrix(womenWork[,2:9]);
covNames <- names(womenWork)[2:length(names(womenWork))];
X <- X[,chooseCov]; # Here we pick out the chosen covariates.
covNames <- covNames[chooseCov];
nPara <- dim(X)[2];
# Setting up the prior
mu <- as.vector(rep(0,nPara)) # Prior mean vector
Sigma <- tau^2*diag(nPara);
LogPostLogistic <- function(betaVect,y,X,mu,Sigma){
nPara <- length(betaVect);
linPred <- X%*%betaVect;
logLik <- sum( linPred*y -log(1 + exp(linPred)));
if (abs(logLik) == Inf) logLik = -20000; # Likelihood is not finite, stear the optimizer away from here!
logPrior <- dmvnorm(betaVect, matrix(0,nPara,1), Sigma, log=TRUE);
return(logLik + logPrior)
}
initVal <- as.vector(rep(0,dim(X)[2]));
logPost = LogPostLogistic;
OptimResults<-optim(initVal,logPost,gr=NULL,y,X,mu,Sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
# Printing the results to the screen
names(OptimResults$par) <- covNames # Naming the coefficient by covariates
approxPostStd <- sqrt(diag(-solve(OptimResults$hessian))) # Computing approximate standard deviations.
approxPostStd <- sqrt(diag(-solve(OptimResults$hessian)))
names(approxPostStd) <- covNames # Naming the coefficient by covariates
betatilde = OptimResults$par
print("Betatilde: ")
print(betatilde)
print("Jacobiany beta: ")
print(approxPostStd)
print("Intervall NSmallChild: ")
upperb = betatilde["NSmallChild"] + 1.96*approxPostStd["NSmallChild"]
lowerb = betatilde["NSmallChild"] - 1.96*approxPostStd["NSmallChild"]
print(upperb)
print(lowerb)
### part c
covarMatrix = -inv(OptimResults$hessian)
ladyInput = c(1, 10, 8, 10, (10/10)^2, 40, 1, 1)
workOrNots = c()
workOrNotsBinary = c()
betas = rmvt(n = 1000,mu = matrix(betatilde), S = covarMatrix)
for(row in 1:nrow(betas)) {
working = exp(ladyInput %*% betas[row, ])/(1 + exp(ladyInput %*% betas[row, ]))
workingBinary = round(working)
workOrNots = c(workOrNots, working)
workOrNotsBinary = c(workOrNotsBinary, workingBinary)
}
hist(workOrNots, n=30)
hist(workOrNotsBinary, n=30)
