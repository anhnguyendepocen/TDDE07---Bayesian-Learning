mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
legend("topright", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
Sys.sleep(sleepTime)
}
}
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDens, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = mean(x), sd = apply(x,2,sd)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density"), col=c("black","red","blue"), lwd = 2)
# Estimating a simple mixture of normals
# Author: Mattias Villani, IDA, Linkoping University. http://mattiasvillani.com
##########    BEGIN USER INPUT #################
# Data options
rawData <- read.table("rainfall.dat",header=TRUE)
x <- as.matrix(rawData)
# Model options
nComp <- 2    # Number of mixture components
# Prior options
alpha <- 10*rep(1,nComp) # Dirichlet(alpha)
muPrior <- rep(30,nComp) # Prior mean of mu
tau2Prior <- rep(10,nComp) # Prior std of mu
sigma2_0 <- rep(var(x),nComp) # s20 (best guess of sigma2)
nu0 <- rep(4,nComp) # degrees of freedom for prior on sigma2
# MCMC options
nIter <- 1000 # Number of Gibbs sampling draws
# Plotting options
plotFit <- TRUE
lineColors <- c("blue", "green", "magenta", 'yellow')
sleepTime <- 0 # Adding sleep time between iterations for plotting
################   END USER INPUT ###############
###### Defining a function that simulates from the
rScaledInvChi2 <- function(n, df, scale){
return((df*scale)/rchisq(n,df=df))
}
####### Defining a function that simulates from a Dirichlet distribution
rDirichlet <- function(param){
nCat <- length(param)
piDraws <- matrix(NA,nCat,1)
for (j in 1:nCat){
piDraws[j] <- rgamma(1,param[j],1)
}
piDraws = piDraws/sum(piDraws) # Diving every column of piDraws by the sum of the elements in that column.
return(piDraws)
}
# Simple function that converts between two different representations of the mixture allocation
S2alloc <- function(S){
n <- dim(S)[1]
alloc <- rep(0,n)
for (i in 1:n){
alloc[i] <- which(S[i,] == 1)
}
return(alloc)
}
# Initial value for the MCMC
nObs <- length(x)
S <- t(rmultinom(nObs, size = 1 , prob = rep(1/nComp,nComp))) # nObs-by-nComp matrix with component allocations.
mu <- quantile(x, probs = seq(0.2,0.8,length = nComp))
sigma2 <- rep(var(x),nComp)
probObsInComp <- rep(NA, nComp)
# Setting up the plot
xGrid <- seq(min(x)-1*apply(x,2,sd),max(x)+1*apply(x,2,sd),length = 100)
xGridMin <- min(xGrid)
xGridMax <- max(xGrid)
mixDensMean <- rep(0,length(xGrid))
effIterCount <- 0
ylim <- c(0,2*max(hist(x, n = 50)$density))
stored_mu = as.matrix(0, nIter, nComp)
stored_sigma = as.matrix(0, nIter, nComp)
for (k in 1:nIter){
message(paste('Iteration number:',k))
alloc <- S2alloc(S) # Just a function that converts between different representations of the group allocations
nAlloc <- colSums(S)
# Update components probabilities
pi <- rDirichlet(alpha + nAlloc)
# Update mu's
for (j in 1:nComp){
precPrior <- 1/tau2Prior[j]
precData <- nAlloc[j]/sigma2[j]
precPost <- precPrior + precData
wPrior <- precPrior/precPost
muPost <- wPrior*muPrior + (1-wPrior)*mean(x[alloc == j])
tau2Post <- 1/precPost
mu[j] <- rnorm(1, mean = muPost, sd = sqrt(tau2Post))
stored_mu(nIter, j) = mu[j]
}
# Update sigma2's
for (j in 1:nComp){
sigma2[j] <- rScaledInvChi2(1, df = nu0[j] + nAlloc[j], scale = (nu0[j]*sigma2_0[j] + sum((x[alloc == j] - mu[j])^2))/(nu0[j] + nAlloc[j]))
stored_sigma(nIter, j) = sigma2[j]
}
# Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- pi[j]*dnorm(x[i], mean = mu[j], sd = sqrt(sigma2[j]))
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Printing the fitted density against data histogram
if (plotFit && (k%%50 ==0)){
effIterCount <- effIterCount + 1
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = paste("Iteration number",k), ylim = ylim)
mixDens <- rep(0,length(xGrid))
components <- c()
for (j in 1:nComp){
compDens <- dnorm(xGrid,mu[j],sd = sqrt(sigma2[j]))
mixDens <- mixDens + pi[j]*compDens
lines(xGrid, compDens, type = "l", lwd = 2, col = lineColors[j])
components[j] <- paste("Component ",j)
}
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
legend("topright", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
Sys.sleep(sleepTime)
}
}
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDens, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = mean(x), sd = apply(x,2,sd)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density"), col=c("black","red","blue"), lwd = 2)
# Estimating a simple mixture of normals
# Author: Mattias Villani, IDA, Linkoping University. http://mattiasvillani.com
##########    BEGIN USER INPUT #################
# Data options
rawData <- read.table("rainfall.dat",header=TRUE)
x <- as.matrix(rawData)
# Model options
nComp <- 2    # Number of mixture components
# Prior options
alpha <- 10*rep(1,nComp) # Dirichlet(alpha)
muPrior <- rep(30,nComp) # Prior mean of mu
tau2Prior <- rep(10,nComp) # Prior std of mu
sigma2_0 <- rep(var(x),nComp) # s20 (best guess of sigma2)
nu0 <- rep(4,nComp) # degrees of freedom for prior on sigma2
# MCMC options
nIter <- 1000 # Number of Gibbs sampling draws
# Plotting options
plotFit <- TRUE
lineColors <- c("blue", "green", "magenta", 'yellow')
sleepTime <- 0 # Adding sleep time between iterations for plotting
################   END USER INPUT ###############
###### Defining a function that simulates from the
rScaledInvChi2 <- function(n, df, scale){
return((df*scale)/rchisq(n,df=df))
}
####### Defining a function that simulates from a Dirichlet distribution
rDirichlet <- function(param){
nCat <- length(param)
piDraws <- matrix(NA,nCat,1)
for (j in 1:nCat){
piDraws[j] <- rgamma(1,param[j],1)
}
piDraws = piDraws/sum(piDraws) # Diving every column of piDraws by the sum of the elements in that column.
return(piDraws)
}
# Simple function that converts between two different representations of the mixture allocation
S2alloc <- function(S){
n <- dim(S)[1]
alloc <- rep(0,n)
for (i in 1:n){
alloc[i] <- which(S[i,] == 1)
}
return(alloc)
}
# Initial value for the MCMC
nObs <- length(x)
S <- t(rmultinom(nObs, size = 1 , prob = rep(1/nComp,nComp))) # nObs-by-nComp matrix with component allocations.
mu <- quantile(x, probs = seq(0.2,0.8,length = nComp))
sigma2 <- rep(var(x),nComp)
probObsInComp <- rep(NA, nComp)
# Setting up the plot
xGrid <- seq(min(x)-1*apply(x,2,sd),max(x)+1*apply(x,2,sd),length = 100)
xGridMin <- min(xGrid)
xGridMax <- max(xGrid)
mixDensMean <- rep(0,length(xGrid))
effIterCount <- 0
ylim <- c(0,2*max(hist(x, n = 50)$density))
stored_mu = as.matrix(0, nIter, nComp)
stored_sigma = as.matrix(0, nIter, nComp)
for (k in 1:nIter){
message(paste('Iteration number:',k))
alloc <- S2alloc(S) # Just a function that converts between different representations of the group allocations
nAlloc <- colSums(S)
# Update components probabilities
pi <- rDirichlet(alpha + nAlloc)
# Update mu's
for (j in 1:nComp){
precPrior <- 1/tau2Prior[j]
precData <- nAlloc[j]/sigma2[j]
precPost <- precPrior + precData
wPrior <- precPrior/precPost
muPost <- wPrior*muPrior + (1-wPrior)*mean(x[alloc == j])
tau2Post <- 1/precPost
mu[j] <- rnorm(1, mean = muPost, sd = sqrt(tau2Post))
stored_mu[nIter, j] = mu[j]
}
# Update sigma2's
for (j in 1:nComp){
sigma2[j] <- rScaledInvChi2(1, df = nu0[j] + nAlloc[j], scale = (nu0[j]*sigma2_0[j] + sum((x[alloc == j] - mu[j])^2))/(nu0[j] + nAlloc[j]))
stored_sigma[nIter, j] = sigma2[j]
}
# Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- pi[j]*dnorm(x[i], mean = mu[j], sd = sqrt(sigma2[j]))
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Printing the fitted density against data histogram
if (plotFit && (k%%50 ==0)){
effIterCount <- effIterCount + 1
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = paste("Iteration number",k), ylim = ylim)
mixDens <- rep(0,length(xGrid))
components <- c()
for (j in 1:nComp){
compDens <- dnorm(xGrid,mu[j],sd = sqrt(sigma2[j]))
mixDens <- mixDens + pi[j]*compDens
lines(xGrid, compDens, type = "l", lwd = 2, col = lineColors[j])
components[j] <- paste("Component ",j)
}
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
legend("topright", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
Sys.sleep(sleepTime)
}
}
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDens, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = mean(x), sd = apply(x,2,sd)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density"), col=c("black","red","blue"), lwd = 2)
stored_sigma[1, 1]
stored_sigma[10, 2]
stored_sigma[2, 20]
stored_sigma2
stored_sigma
stored_mu = matrix(0, nIter, nComp)
stored_sigma = matrix(0, nIter, nComp)
stored_mu
# Estimating a simple mixture of normals
# Author: Mattias Villani, IDA, Linkoping University. http://mattiasvillani.com
##########    BEGIN USER INPUT #################
# Data options
rawData <- read.table("rainfall.dat",header=TRUE)
x <- as.matrix(rawData)
# Model options
nComp <- 2    # Number of mixture components
# Prior options
alpha <- 10*rep(1,nComp) # Dirichlet(alpha)
muPrior <- rep(30,nComp) # Prior mean of mu
tau2Prior <- rep(10,nComp) # Prior std of mu
sigma2_0 <- rep(var(x),nComp) # s20 (best guess of sigma2)
nu0 <- rep(4,nComp) # degrees of freedom for prior on sigma2
# MCMC options
nIter <- 1000 # Number of Gibbs sampling draws
# Plotting options
plotFit <- TRUE
lineColors <- c("blue", "green", "magenta", 'yellow')
sleepTime <- 0 # Adding sleep time between iterations for plotting
################   END USER INPUT ###############
###### Defining a function that simulates from the
rScaledInvChi2 <- function(n, df, scale){
return((df*scale)/rchisq(n,df=df))
}
####### Defining a function that simulates from a Dirichlet distribution
rDirichlet <- function(param){
nCat <- length(param)
piDraws <- matrix(NA,nCat,1)
for (j in 1:nCat){
piDraws[j] <- rgamma(1,param[j],1)
}
piDraws = piDraws/sum(piDraws) # Diving every column of piDraws by the sum of the elements in that column.
return(piDraws)
}
# Simple function that converts between two different representations of the mixture allocation
S2alloc <- function(S){
n <- dim(S)[1]
alloc <- rep(0,n)
for (i in 1:n){
alloc[i] <- which(S[i,] == 1)
}
return(alloc)
}
# Initial value for the MCMC
nObs <- length(x)
S <- t(rmultinom(nObs, size = 1 , prob = rep(1/nComp,nComp))) # nObs-by-nComp matrix with component allocations.
mu <- quantile(x, probs = seq(0.2,0.8,length = nComp))
sigma2 <- rep(var(x),nComp)
probObsInComp <- rep(NA, nComp)
# Setting up the plot
xGrid <- seq(min(x)-1*apply(x,2,sd),max(x)+1*apply(x,2,sd),length = 100)
xGridMin <- min(xGrid)
xGridMax <- max(xGrid)
mixDensMean <- rep(0,length(xGrid))
effIterCount <- 0
ylim <- c(0,2*max(hist(x, n = 50)$density))
stored_mu = matrix(0, nIter, nComp)
stored_sigma = matrix(0, nIter, nComp)
for (k in 1:nIter){
message(paste('Iteration number:',k))
alloc <- S2alloc(S) # Just a function that converts between different representations of the group allocations
nAlloc <- colSums(S)
# Update components probabilities
pi <- rDirichlet(alpha + nAlloc)
# Update mu's
for (j in 1:nComp){
precPrior <- 1/tau2Prior[j]
precData <- nAlloc[j]/sigma2[j]
precPost <- precPrior + precData
wPrior <- precPrior/precPost
muPost <- wPrior*muPrior + (1-wPrior)*mean(x[alloc == j])
tau2Post <- 1/precPost
mu[j] <- rnorm(1, mean = muPost, sd = sqrt(tau2Post))
stored_mu[nIter, j] = mu[j]
}
# Update sigma2's
for (j in 1:nComp){
sigma2[j] <- rScaledInvChi2(1, df = nu0[j] + nAlloc[j], scale = (nu0[j]*sigma2_0[j] + sum((x[alloc == j] - mu[j])^2))/(nu0[j] + nAlloc[j]))
stored_sigma[nIter, j] = sigma2[j]
}
# Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- pi[j]*dnorm(x[i], mean = mu[j], sd = sqrt(sigma2[j]))
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Printing the fitted density against data histogram
if (plotFit && (k%%50 ==0)){
effIterCount <- effIterCount + 1
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = paste("Iteration number",k), ylim = ylim)
mixDens <- rep(0,length(xGrid))
components <- c()
for (j in 1:nComp){
compDens <- dnorm(xGrid,mu[j],sd = sqrt(sigma2[j]))
mixDens <- mixDens + pi[j]*compDens
lines(xGrid, compDens, type = "l", lwd = 2, col = lineColors[j])
components[j] <- paste("Component ",j)
}
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
legend("topright", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
Sys.sleep(sleepTime)
}
}
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDens, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = mean(x), sd = apply(x,2,sd)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density"), col=c("black","red","blue"), lwd = 2)
library(coda)
library(markovchain)
traceplot(mu_sigma, smooth = FALSE, col = 1:6, type = "1", xlab = "Iterations", ylab = "oxygen", xlim = 50, ylim = 1)
traceplot(stored_mu, smooth = FALSE, col = 1:6, type = "1", xlab = "Iterations", ylab = "oxygen", xlim = 50, ylim = 1)
plot(stored_mu)
plot(stored_mu[1])
plot(stored_mu[1])
plot(stored_mu[, 1])
plot(stored_mu[, 2])
stored_mu[900:1000, ]
# Estimating a simple mixture of normals
# Author: Mattias Villani, IDA, Linkoping University. http://mattiasvillani.com
##########    BEGIN USER INPUT #################
# Data options
rawData <- read.table("rainfall.dat",header=TRUE)
x <- as.matrix(rawData)
# Model options
nComp <- 2    # Number of mixture components
# Prior options
alpha <- 10*rep(1,nComp) # Dirichlet(alpha)
muPrior <- rep(30,nComp) # Prior mean of mu
tau2Prior <- rep(10,nComp) # Prior std of mu
sigma2_0 <- rep(var(x),nComp) # s20 (best guess of sigma2)
nu0 <- rep(4,nComp) # degrees of freedom for prior on sigma2
# MCMC options
nIter <- 1000 # Number of Gibbs sampling draws
# Plotting options
plotFit <- TRUE
lineColors <- c("blue", "green", "magenta", 'yellow')
sleepTime <- 0 # Adding sleep time between iterations for plotting
################   END USER INPUT ###############
###### Defining a function that simulates from the
rScaledInvChi2 <- function(n, df, scale){
return((df*scale)/rchisq(n,df=df))
}
####### Defining a function that simulates from a Dirichlet distribution
rDirichlet <- function(param){
nCat <- length(param)
piDraws <- matrix(NA,nCat,1)
for (j in 1:nCat){
piDraws[j] <- rgamma(1,param[j],1)
}
piDraws = piDraws/sum(piDraws) # Diving every column of piDraws by the sum of the elements in that column.
return(piDraws)
}
# Simple function that converts between two different representations of the mixture allocation
S2alloc <- function(S){
n <- dim(S)[1]
alloc <- rep(0,n)
for (i in 1:n){
alloc[i] <- which(S[i,] == 1)
}
return(alloc)
}
# Initial value for the MCMC
nObs <- length(x)
S <- t(rmultinom(nObs, size = 1 , prob = rep(1/nComp,nComp))) # nObs-by-nComp matrix with component allocations.
mu <- quantile(x, probs = seq(0.2,0.8,length = nComp))
sigma2 <- rep(var(x),nComp)
probObsInComp <- rep(NA, nComp)
# Setting up the plot
xGrid <- seq(min(x)-1*apply(x,2,sd),max(x)+1*apply(x,2,sd),length = 100)
xGridMin <- min(xGrid)
xGridMax <- max(xGrid)
mixDensMean <- rep(0,length(xGrid))
effIterCount <- 0
ylim <- c(0,2*max(hist(x, n = 50)$density))
stored_mu = matrix(0, nIter, nComp)
stored_sigma = matrix(0, nIter, nComp)
for (k in 1:nIter){
message(paste('Iteration number:',k))
alloc <- S2alloc(S) # Just a function that converts between different representations of the group allocations
nAlloc <- colSums(S)
# Update components probabilities
pi <- rDirichlet(alpha + nAlloc)
# Update mu's
for (j in 1:nComp){
precPrior <- 1/tau2Prior[j]
precData <- nAlloc[j]/sigma2[j]
precPost <- precPrior + precData
wPrior <- precPrior/precPost
muPost <- wPrior*muPrior + (1-wPrior)*mean(x[alloc == j])
tau2Post <- 1/precPost
mu[j] <- rnorm(1, mean = muPost, sd = sqrt(tau2Post))
stored_mu[k, j] = mu[j]
}
# Update sigma2's
for (j in 1:nComp){
sigma2[j] <- rScaledInvChi2(1, df = nu0[j] + nAlloc[j], scale = (nu0[j]*sigma2_0[j] + sum((x[alloc == j] - mu[j])^2))/(nu0[j] + nAlloc[j]))
stored_sigma[k, j] = sigma2[j]
}
# Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- pi[j]*dnorm(x[i], mean = mu[j], sd = sqrt(sigma2[j]))
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Printing the fitted density against data histogram
if (plotFit && (k%%50 ==0)){
effIterCount <- effIterCount + 1
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = paste("Iteration number",k), ylim = ylim)
mixDens <- rep(0,length(xGrid))
components <- c()
for (j in 1:nComp){
compDens <- dnorm(xGrid,mu[j],sd = sqrt(sigma2[j]))
mixDens <- mixDens + pi[j]*compDens
lines(xGrid, compDens, type = "l", lwd = 2, col = lineColors[j])
components[j] <- paste("Component ",j)
}
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
lines(xGrid, mixDens, type = "l", lty = 2, lwd = 3, col = 'red')
legend("topright", box.lty = 1, legend = c("Data histogram",components, 'Mixture'),
col = c("black",lineColors[1:nComp], 'red'), lwd = 2)
Sys.sleep(sleepTime)
}
}
hist(x, breaks = 50, freq = FALSE, xlim = c(xGridMin,xGridMax), main = "Final fitted density")
lines(xGrid, mixDens, type = "l", lwd = 2, lty = 4, col = "red")
lines(xGrid, dnorm(xGrid, mean = mean(x), sd = apply(x,2,sd)), type = "l", lwd = 2, col = "blue")
legend("topright", box.lty = 1, legend = c("Data histogram","Mixture density","Normal density"), col=c("black","red","blue"), lwd = 2)
library(coda)
library(markovchain)
plot(stored_mu[, 2])
plot(stored_mu[, 2], type='l')
par(mfrow=c(2,2))
plot(stored_mu[, 1], type='l')
plot(stored_mu[, 2], type='l')
plot(stored_sigma[, 1], type='l')
plot(stored_sigma[, 2], type='l')
par(mfrow=c(2,2))
plot(stored_mu[, 1], type='l' main = 'mu 1')
plot(stored_mu[, 2], type='l' main = 'mu 2')
plot(stored_sigma[, 1], type='l' main = 'sigma 1')
plot(stored_sigma[, 2], type='l' main = 'sigma 2')
par(mfrow=c(2,2))
plot(stored_mu[, 1], type='l', main = 'mu 1')
plot(stored_mu[, 2], type='l', main = 'mu 2')
plot(stored_sigma[, 1], type='l', main = 'sigma 1')
plot(stored_sigma[, 2], type='l', main = 'sigma 2')
par(mfrow=c(2,2))
plot(stored_mu[10:, 1], type='l', main = 'mu 1')
plot(stored_mu[10:, 2], type='l', main = 'mu 2')
plot(stored_sigma[10:, 1], type='l', main = 'sigma 1')
plot(stored_sigma[10:, 2], type='l', main = 'sigma 2')
par(mfrow=c(2,2))
plot(stored_mu[10:end, 1], type='l', main = 'mu 1')
plot(stored_mu[10:end, 2], type='l', main = 'mu 2')
plot(stored_sigma[10:end, 1], type='l', main = 'sigma 1')
plot(stored_sigma[10:end, 2], type='l', main = 'sigma 2')
par(mfrow=c(2,2))
plot(stored_mu[10:nIter, 1], type='l', main = 'mu 1')
plot(stored_mu[10:nIter, 2], type='l', main = 'mu 2')
plot(stored_sigma[10:nIter, 1], type='l', main = 'sigma 1')
plot(stored_sigma[10:nIter, 2], type='l', main = 'sigma 2')
par(mfrow=c(2,2))
plot(stored_mu[20:nIter, 1], type='l', main = 'mu 1')
plot(stored_mu[20:nIter, 2], type='l', main = 'mu 2')
plot(stored_sigma[20:nIter, 1], type='l', main = 'sigma 1')
plot(stored_sigma[20:nIter, 2], type='l', main = 'sigma 2')
